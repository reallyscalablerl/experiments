# this file should be saved at ~/.surreal.yml or SURREAL_CONFIG_PATH

# Give yourself a name. Experiments are automatically prepended with your name
username: surreal
# Optionally, you can turn this behavior off by setting prefix_experiment_with_username = False
prefix_experiment_with_username: True

# These commands a run in every tmux window before you launch an experiment using surreal-tmux
tmux_preamble_cmds:
  - 'source activate surreal'
  # - ...
# Every time an experiment is created on tmux, result data will be written here
tmux_results_folder: /surreal/results/tmux # ~/surreal-tmux/

subproc_results_folder: /surreal/results/subproc # ~/surreal-subproc/


## !!! Stop here if you are only running things locally !!!

# Every time an experiment is created on kubernetes, some persisted data will be stored here
kube_metadata_folder: <put path here> # ~/kurreal/
# After you use cloudwise to create a cluster, you will obtain <cluster_name>.tf.json put its location here
cluster_definition: <cluster_definition.tf.json>
# Every time an experiment is created on tmux, result data will be written here
# Important: This path is inside a container
kube_results_folder: <put path here> # /fs/experiments/<your_username>
# Mount secret files, they would be available at /etc/secrets
# mount_secrets:
#   - ~/.mujoco/mjkey.txt

# Uncomment to enable nfs support
# nfs:
#   servername: <put instance name here> # nfs_server
#   # This directory on the nfs server contains the file system
#   fs_location: <put path here> # /data
#   # Mount fs_location to mount_path in containers
#   mount_path: <put path here> # /fs
#   results_folder: <put path here> # /data/experiments/<your_username>

# Here you can specify creation settings for your experiments. See creation_settings.md for more details
creation_settings:
  cpu-gym:
    # Currently there is only one mode available
    mode: basic
    # Number of agent containers
    num_agents: 2
    # Number of eval containers
    num_evals: 1
    # Number of agent processes per container
    agent_batch: 1
    # Number of eval processes per container
    eval_batch: 1
    # RL algorithm to use (ddpg / ppo) or path to a .py excecutable file in the container
    # The .py excecutable should at least support the interface of surreal/main/ddpg.py and surreal/main/ppo.py
    algorithm: ddpg
    # Environment to use
    env: gym:HalfCheetah-v2
    agent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      scheduling:
        # Configure scheduling depending on your need
        assign_to: resource
        cpu: 1.5
    nonagent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      # Configure scheduling depending on your need
      scheduling:
        assign_to: resource
        cpu: 7


  cpu-mujoco:
    # Currently there is only one mode available
    mode: basic
    # Number of agent containers
    num_agents: 8
    # Number of eval containers
    num_evals: 1
    # Number of agent processes per container
    agent_batch: 1
    # Number of eval processes per container
    eval_batch: 1
    # RL algorithm to use (ddpg / ppo) or path to a .py excecutable file in the container
    # The .py excecutable should at least support the interface of surreal/main/ddpg.py and surreal/main/ppo.py
    algorithm: ppo
    # Environment to use
    env: robosuite:SawyerLift
    agent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      scheduling:
        # Configure scheduling depending on your need
        assign_to: resource
        cpu: 1.5
    nonagent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      # Configure scheduling depending on your need
      scheduling:
        assign_to: resource
        cpu: 7

## !!! Stop here if you are only running cpu based experiments on Kubernetes !!!

  k80-robosuite:
    mode: basic
    num_agents: 4
    num_evals: 1
    agent_batch: 8
    eval_batch: 8
    algorithm: ppo
    env: robosuite:SawyerLift
    agent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      scheduling:
        assign_to: resource
        gpu_type: k80
        gpu_count: 1
    nonagent:
      image: surrealai/surreal-nvidia:v0.1
      build_image: null
      scheduling:
        assign_to: resource
        gpu_type: k80
        gpu_count: 1

## !!! Stop here if you are only running cpu or gpu based experiments on Kubernetes !!!
## !!! Move on if you want to develop using Surreal !!!

  contrib:
    mode: basic
    agent:
      image: <my-registry>/<repo-name>
      build_image: contrib-image
    nonagent:
      image: <my-registry>/<repo-name>
      build_image: contrib-image


docker_build_settings:
  - name: contrib-image
    temp_directory: <~/symph_temp/contrib or anywhere you want image build to happen>
    verbose: true
    dockerfile: <path to your surreal fork>/docker/Dockerfile-contribute
    context_directories:
      - name: surreal
        path: <path to your surreal fork>
        force_update: true
